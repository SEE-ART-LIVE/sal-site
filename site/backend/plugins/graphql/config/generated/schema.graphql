input createEventInput {
  data: EventInput
}

type createEventPayload {
  event: Event
}

input createLocationInput {
  data: LocationInput
}

type createLocationPayload {
  location: Location
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteEventInput {
  where: InputID
}

type deleteEventPayload {
  event: Event
}

input deleteLocationInput {
  where: InputID
}

type deleteLocationPayload {
  location: Location
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editEventInput {
  Title: String
  Image: ID
  Date: DateTime
  Description: String
  location: ID
  user: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editLocationInput {
  Name: String
  Description: String
  Address: String
  City: String
  State: ENUM_LOCATION_STATE
  Zipcode: Int
  Image: ID
  Country: ENUM_LOCATION_COUNTRY
  event: ID
  user: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  location: [ID]
  event: [ID]
}

enum ENUM_LOCATION_COUNTRY {
  AF
  AL
  DZ
  AS
  AD
  AO
  AIG
  AG
  AR
  AM
  AW
  AU
  AI
  AZ
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BR
  IO
  VG
  BN
  BG
  BF
  MM
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  IDCHAD
  CL
  CN
  CO
  KM
  CK
  CR
  CI
  HR
  CU
  CY
  CZ
  CD
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FM
  FJ
  FI
  FR
  GF
  PF
  GA
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GN
  GW
  GY
  HT
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IL
  IT
  JM
  JP
  JO
  KZ
  KE
  KI
  XK
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PL
  PT
  PR
  QA
  CG
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SB
  SO
  ZA
  KR
  ES
  LK
  LC
  SD
  SR
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  BS
  GM
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UY
  VI
  UZ
  VU
  VA
  VE
  VN
  WF
  YE
  ZM
  ZW
}

enum ENUM_LOCATION_STATE {
  AL
  AK
  AS
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FM
  FL
  GA
  GU
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MH
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  MP
  OH
  OK
  OR
  PW
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VI
  VA
  WA
  WV
  WI
  WY
}

"""See Art Live  Event Content Type"""
type Event {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Title: String
  Image: UploadFile
  Date: DateTime
  Description: String
  location: Location
  user: UsersPermissionsUser
}

type EventAggregator {
  count: Int
}

type EventConnection {
  values: [Event]
  groupBy: EventGroupBy
  aggregate: EventAggregator
}

type EventConnection_id {
  key: ID
  connection: EventConnection
}

type EventConnectionCreatedAt {
  key: DateTime
  connection: EventConnection
}

type EventConnectionDate {
  key: DateTime
  connection: EventConnection
}

type EventConnectionDescription {
  key: String
  connection: EventConnection
}

type EventConnectionImage {
  key: ID
  connection: EventConnection
}

type EventConnectionLocation {
  key: ID
  connection: EventConnection
}

type EventConnectionTitle {
  key: String
  connection: EventConnection
}

type EventConnectionUpdatedAt {
  key: DateTime
  connection: EventConnection
}

type EventConnectionUser {
  key: ID
  connection: EventConnection
}

type EventGroupBy {
  _id: [EventConnection_id]
  createdAt: [EventConnectionCreatedAt]
  updatedAt: [EventConnectionUpdatedAt]
  Title: [EventConnectionTitle]
  Image: [EventConnectionImage]
  Date: [EventConnectionDate]
  Description: [EventConnectionDescription]
  location: [EventConnectionLocation]
  user: [EventConnectionUser]
}

input EventInput {
  Title: String
  Image: ID
  Date: DateTime
  Description: String
  location: ID
  user: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Location of Event Space"""
type Location {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  Description: String
  Address: String
  City: String
  State: ENUM_LOCATION_STATE
  Zipcode: Int
  Image: UploadFile
  Country: ENUM_LOCATION_COUNTRY
  event: Event
  user: UsersPermissionsUser
}

type LocationAggregator {
  count: Int
  sum: LocationAggregatorSum
  avg: LocationAggregatorAvg
  min: LocationAggregatorMin
  max: LocationAggregatorMax
}

type LocationAggregatorAvg {
  Zipcode: Float
}

type LocationAggregatorMax {
  Zipcode: Float
}

type LocationAggregatorMin {
  Zipcode: Float
}

type LocationAggregatorSum {
  Zipcode: Float
}

type LocationConnection {
  values: [Location]
  groupBy: LocationGroupBy
  aggregate: LocationAggregator
}

type LocationConnection_id {
  key: ID
  connection: LocationConnection
}

type LocationConnectionAddress {
  key: String
  connection: LocationConnection
}

type LocationConnectionCity {
  key: String
  connection: LocationConnection
}

type LocationConnectionCountry {
  key: String
  connection: LocationConnection
}

type LocationConnectionCreatedAt {
  key: DateTime
  connection: LocationConnection
}

type LocationConnectionDescription {
  key: String
  connection: LocationConnection
}

type LocationConnectionEvent {
  key: ID
  connection: LocationConnection
}

type LocationConnectionImage {
  key: ID
  connection: LocationConnection
}

type LocationConnectionName {
  key: String
  connection: LocationConnection
}

type LocationConnectionState {
  key: String
  connection: LocationConnection
}

type LocationConnectionUpdatedAt {
  key: DateTime
  connection: LocationConnection
}

type LocationConnectionUser {
  key: ID
  connection: LocationConnection
}

type LocationConnectionZipcode {
  key: Int
  connection: LocationConnection
}

type LocationGroupBy {
  _id: [LocationConnection_id]
  createdAt: [LocationConnectionCreatedAt]
  updatedAt: [LocationConnectionUpdatedAt]
  Name: [LocationConnectionName]
  Description: [LocationConnectionDescription]
  Address: [LocationConnectionAddress]
  City: [LocationConnectionCity]
  State: [LocationConnectionState]
  Zipcode: [LocationConnectionZipcode]
  Image: [LocationConnectionImage]
  Country: [LocationConnectionCountry]
  event: [LocationConnectionEvent]
  user: [LocationConnectionUser]
}

input LocationInput {
  Name: String
  Description: String
  Address: String
  City: String
  State: ENUM_LOCATION_STATE
  Zipcode: Int
  Image: ID
  Country: ENUM_LOCATION_COUNTRY
  event: ID
  user: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Event | createEventPayload | updateEventPayload | deleteEventPayload | EventConnection | EventAggregator | EventGroupBy | EventConnection_id | EventConnectionCreatedAt | EventConnectionUpdatedAt | EventConnectionTitle | EventConnectionImage | EventConnectionDate | EventConnectionDescription | EventConnectionLocation | EventConnectionUser | Location | createLocationPayload | updateLocationPayload | deleteLocationPayload | LocationConnection | LocationAggregator | LocationAggregatorSum | LocationAggregatorAvg | LocationAggregatorMin | LocationAggregatorMax | LocationGroupBy | LocationConnection_id | LocationConnectionCreatedAt | LocationConnectionUpdatedAt | LocationConnectionName | LocationConnectionDescription | LocationConnectionAddress | LocationConnectionCity | LocationConnectionState | LocationConnectionZipcode | LocationConnectionImage | LocationConnectionCountry | LocationConnectionEvent | LocationConnectionUser | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createEvent(input: createEventInput): createEventPayload
  updateEvent(input: updateEventInput): updateEventPayload
  deleteEvent(input: deleteEventInput): deleteEventPayload
  createLocation(input: createLocationInput): createLocationPayload
  updateLocation(input: updateLocationInput): updateLocationPayload
  deleteLocation(input: deleteLocationInput): deleteLocationPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  event(id: ID!): Event
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
  eventsConnection(sort: String, limit: Int, start: Int, where: JSON): EventConnection
  location(id: ID!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  locationsConnection(sort: String, limit: Int, start: Int, where: JSON): LocationConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateEventInput {
  where: InputID
  data: editEventInput
}

type updateEventPayload {
  event: Event
}

input updateLocationInput {
  where: InputID
  data: editLocationInput
}

type updateLocationPayload {
  location: Location
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  location: [ID]
  event: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  location(sort: String, limit: Int, start: Int, where: JSON): [Location]
  event(sort: String, limit: Int, start: Int, where: JSON): [Event]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
